安装 swoole
pecl install swoole



'0.0.0.0' 监听所有的ip


service 服务端

TCP服务器

//$event = new swoole_server(string $host, int $port, int $mode = SWOOLE_PROCESS, int $sock_type = SWOOLE_SOCK_TCP);
$serv = new swoole_server('0.0.0.0', 9501);

// 配置参数
$serv->set([
    'worker_num' => 3,      // cpu 的 1~4 倍
    'max_request' => 10000
]);

// 连接事件
$serv->on('connect', function($serv, $fd, $reactor_id){
    echo $reactor_id . " | " . $fd . " | connect\n";
});

// 接收事件
$serv->on('receive', function($serv, $fd, $from_id, $data){
    $serv->send($fd, "Server: " . $fd .  "| from_id " .  $from_id . " | " . $data);
});

// 关闭事件
$serv->on('close', function($serv, $fd){
    echo "close\n";
});

// 开启服务器
$serv->start();


bool swoole_server->on(strint $event, mixed $callback);
	$event->on('connect', function($serv, $fd){})
		connect  建立连接的时候
			$serv   服务器   句柄
			$fd 	客户端   获取到的用户的信息
		receive  当接受到数据
			$serv
			$fd
			$from_id  客户端id
			$data     传递的数据
		close 	 关闭连接
			$serv
			$fd			

$event->start()   //启动服务器	



http_server 服务

// 创建 http 服务
$http = new swoole_http_server('0.0.0.0', 8811);

$http->on('request', function ($request, $response) {
    print_r($request->get);
    $response->end("<h1>Hello Swoole. #".rand(1000, 9999)."</h1>");
});

// 开启服务
$http->start();






client

// 连接 swoole tcp 服务器
$client = new swoole_client(SWOOLE_SOCK_TCP);

if(!$client->connect('127.0.0.1', 9501)){
    echo '连接失败';
    exit;
}

// php cli常量 句柄操作
fwrite(STDOUT, '请输入消息:');
$msg = trim(fgets(STDIN));

// 发送消息给 tcp server 服务器
$client->send($msg);

	//发送数据
	bool swoole_server->end(int $fd, string $data, int $reactorThreadld = 0);  

// 接收来自server 的数据
$result = $client->recv();
echo $result;









UDP服务器

$serv = new swoole_server();
	$cock_type = SWOOLE_SOCK_UDP

//监听数据的事件
$serv->on('packet', function($serv, $data, $fd){
	//发送数据
	$serv->sendto($fd['address'], $fd['port'], "server:$data")
})

onPacket(swoole_server $server, string $data, array $client_info);


bool swoole server->sendto(string $ip, int $port, string $data, int $service


web服务器
new swoole_http_server();
swoole_http_server  集成来自 swoole_server
	参数1:string $host   监听ip地址
	参数2:int $port 		监听端口
on/start函数

$serv = new swoole_http_server('0.0.0.0', 9501);
//$request   请求信息
//$response  返回信息 
$serv->on('request', function($request, $response){
	$response->header('Content-Type', 'text/html;charset=utf-8');
	$response->end('hello world');
});
$serv->start();


web_socket

new swoole_websocket_server()
swoole_websocket_server 继承swoole_http_server
on/start 函数
open/message/close
push() 发送数据

服务端
$ws = new swoole_websocket_server($host, $port);

//建立连接  $ws服务器, $request客户端信息
$ws->on('open', function($ws, $request){})

//接收信息
$ws->on('message', function($ws, $request){
	$request->data
	$ws->push($request->fd)
})


//关闭连接
$ws->on('close', function($ws, $request){})

$ws->start()

客户端
js
	var wsServer = 'ws://192.168.50.133:9501';
	var webSocket = new WebSocket(wsServer);
	webSocket.onopen = function(evt){}
	webSocket.onclose = function(evt){}
	webSocket.onmessaage = function(evt){}
	webSocket.onerror = function(evt){}

alter talbe 


异步TCP服务器
	task() 	 投递异步任务
	on('事件', function(){}) 处理函数  执行异步函数
	finish() 任务处理完成后结果

//创建tcp服务器	
$serv = new swoole_server('0,0,0,0', 9501);
//设置异步 进程工作数
$serv->set(['task_worker_num'] => 4);
//投递异步任务
$serv->on('receive', function($serv,$fd,$from_id,$data){
	$task_id = $serv->task($data); //异步id
})
//处理异步任务
$serv->on('task', function($serv,$task_id,$from_id,$data){
	$serv->finish('ok');
}
//处理结果
$serv->on('finish',function($ser,$task_id,))


tcp客户端
//创建tcp客户端
new swoole_client(SWOOLE_SOCK_TCP)


异步tcp客户端
new swoole_client()
SWOOLE_SOCK_TCP			//TCP协议
SWOOLE_SOCK_ASYNC 		//异步支持

//创建异步TCP客户端
$client = new swoole_client(SWOOLE_SOCK_TCP, SWOOLE_SOCK_ASYNC);
//注册链接成功的回调
$client->on('connet', function($cli){
	$cli->send("hello");
})
//注册数据接收
$client->on('reseive', function($cli, $data){
	echo $data;
})
//注册链接失败
$client->on('error', function($cli){
	echo '失败';
})
//注册关闭函数
$client->on('close', function($cli){
	
})
//发起链接
$client->connet('192.168.50.1', 8080, 10)





Tack  任务
onTask
onFinish
设置 work 连接数

定时器
	循环触发 swoole_timer_tick
		参数1 int $after_time_ms 指定时间 毫秒
		参数2 mixed $callback function 执行的函数
		参数3 mixed $user_param 用户参数
		
		清除定时器
		bool swoole_timer_clear

	单次触发 swoole_timer_after
		

	// 定时器
	wsoole_timer_tick(2000, function($timer_id){})
	// 延时器
	swoole_timer_after(3000, function($timer_id){})



异步IO操作
	读取文件
	// 默认读取 4m  
	swoole_async_readfile('file_path', function($filename, $filecontent));

	// 可用 分段读取 来读取大文件


	// 写文件
	swoole_async_writefile('file_path', $content, function($filename){
		echo 'ok';
	}, FILE_APPEND);

	// 超过 4m 可使用分段写





mysql
	$mysql = new Swoole\mysql;
	$config = [
		'host' => '',
		'port' => '',
		'user' => '',
		'password' => '',
		'database' => '',
		'charset' => 'utf8'
	];

	$mysql->connect($config, function($db, $result){
		if($result === false){
			// 连接失败
			var_dump($db->connect_error);
		}

		$sql = 'select * from test where id = 1';
		$db->query($sql, function($db, $result) {
			// select  返回结果
			// add update delete   返回布尔
		})

	})




redis
	hiredis 
	编译swoole 加入 -enable-async-redis

	php --ri swoole  // 检测开启了那些扩展
		async redis client => enabled  // 可用


	$redisCli = new swoole_redis;
	$redisCli->connet('127.0.0.1', 6370, function(wsoole_redis $redisCli,
	$result){
		echo 'connect';
		var_dump($result);
		
		// 设置
		$redisCli->set('aaa', time(), function(swoole_redis $redisCli, $result){
			var_dump($result);
		})

		// 获取
		$redisCLi->get('aaa', function(swoole_redis $redisCli, $result){
			var_dump($result);
			$redisCli->close();
		})


	});


进程

$process = new swoole_process(function(swoole_proess $pro) {
	//
	$pro->exec('/phpfir/php', [__DIR__ . './index.php'])

	// 写入管道
	$pro->write(1);
	echo 1;
}, true)


// 保存id
$pid = $process->start();

// 获取管道内容
$process->read()


/ 回收
swoole_process::wait();



// shell 命令  查看进程
pstree -p 22727 
ps aft | grep http_server 


// 内存
Lock
Buffer
Table
	一个机遇共享内存和锁实现的超高性能, 并发数据结构

	// 创建内存表
	$table =  new swoole_table(1024);
	// 添加列
	$table = column('id', $table::TYPE_INT, 8);
	$table = column('name', $table::TYPE_STRING, 32);
	$table = column('age', $table::TYPE_INT, 4);

	// 设置数据
	$table->('sign', ['id' => 1, 'name' => 'siwa', 'age' => 30]);

	// 获取
	$table->(get('sign'))

	// 递增  递减 2
	$table->incr('sign', 'age', 2); 
	$table->decr('sign', 'age', 2);

	// 删除
	$table->del('sign');





Atomic
mmap
channel
serialize





// 协程 Server   Swoole\Coroutine (内置的)
目前只支持在onRequet, onReceive, onConnect等事件回调函数中使用协程

$redis = new Swoole\Coroutine\Redis();
$redis->connet('127.0.0.1', 6379);
$redis->get('key');





配置参数

$server->set([
	'worker_num' => 8, 
	// 启动的 worker 进程数     建议为 cpu核数的1~4倍

	'max_request' => 8,
	// 每个 worker 最大任务数   防止worker 大量请求后内存溢出

	'max_conn' => 1000
	// 最大 TCP 连接数

	'ipc_mode' => 1
	// 设置进程间的通信方式
		1  使用unix socket通信
		2  使用消息队列通信
		3  使用消息队列通信, 并设置为争抢模式

	
])

