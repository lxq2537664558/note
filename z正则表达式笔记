正则表达式是一种独立的语言,可以运用如php,java等编程语言中

正则表达式(regular rxpression)描述了一种字符串匹配的模式,可以用来检查一个串是否含有魔种子串,将匹配的子串做替换或者从摸个串种去除符合摸个条件的子串登等

正则表达式的作用
	信息的隐藏
	信息过滤
	信息采集器
	数据匹配,数据查询

正则三步骤
	要查什么
	要查多少
	从哪里查

正则表达式是由普通字符(例如字符a到z)以及特殊字符(称为元字符)组成的文字模式.正则表达式作为一个模板,将某个字符模式与所搜索的字符串进行匹配

定界符(边界)
	正则表达式规则的边界, 边界通常都会使用 // 来表示边界, 也可以使用 ## 作为边界

元字符(筛选的内容)
	表示筛选的内容, 默认使用一个字符表示筛选的内容就是一个字符

	字符匹配符
		字符匹配用于匹配某个或某些字符
		.		查找单个字符,除了换行和结束符
		\d		匹配一个数字字符[0-9]
		\D		匹配一个非数字字符[^0-9]
		\w		匹配包括任何非单词字符[0-9a-zA-Z_]
		\W		匹配任何非非单词字符[^0-9a-zA-Z_]
		\s		匹配任何格空白字符 空格 换行 制表位
		\S 		匹配任何非空白字符
		\b 		单词边界
		\B		非单词边界
		\0		查找NUL字符
	 	\n		查找换行符
		\f		查找换页符							
		\r		查找回车符
		\t 		查找制表符
		\v 		查找垂直制表符
		\xxx	查找以八进制数xxx规定的字符 没结果返回null
		\xdd	查找以十六进制数dd规定的字符
		\udddd	查找以十六进制xxxx规定的Unicode字符

	方括号
	用于查找某个范围内的字符
	[]		在正则表达式称之为字符簇(只匹配一个字符)
		[a-z]	匹配a-z中任一字符
		[A-Z]	匹配A-Z中任一字符
		[0-9]	匹配0-9任一字符
		[0-9a-zA-Z]
		[^]		在正则中表示取反

量词(声明筛选的字符数量)
	+		至少包含一个
	*		0个或者多个
 	?		0|1
	|		选择匹配符
	{x}		匹配x次
	{x,}	最少匹配x次
	{,x}	最多匹配x次
	{x,y}	最少x次,最多y次
	^n		匹配任何开头为n的字符串
	n$		匹配任何结尾为n的字符串
	?=n		匹配任何其后紧接指定字符串n的字符串		
	?!n		匹配任何其后没有紧接指定字符串n的字符串	

	^   $符号
		^ 表示从哪里开始，也就是开始的位置
		$ 表示到哪里结束，也就是结束的位置



贪婪模式与非贪婪模式
	贪婪匹配		默认情况正则表达式采用的就是贪婪匹配模式
	非贪婪匹配  	匹配最少的那个情况,就是非贪婪匹配,可以采用?的形式实现
		/\d{3,5}?/

	？如果放在元字符后面，表示元字符的数量是0个或1个
	？如果放在量词后面，就表示懒惰模式，就会尽可能少的匹配

	 ()
		在正则表达式中,通过一对小括号()括起来的表达式,我们称之为子表达式
		特殊用法
			(?:)	查询结果,但不捕获
	捕获
		在js中,当通过子表达式匹配到相应的内容,系统会自动将其存储到缓存区中,我们把这个过程称之为捕获
	反向引用(后向引用)
		在正则表达式中,我们可以通过\n(n代表缓存区域,是一个数字)获取到缓存区中的存储内容
		




定义转义符		\


PHP
	在php表示中文转码之后的范围中的一个 	[\x{4e00}-\x{9fa5}]
	注意：筛选中文时，需要采用utf-8进行转码

	模式修正符(对规则进行修饰)
	i	修饰正则表达式，不区分大小写  /\d{3,5}/i
	u 	小写的u表示采用utf-8编码进行解析字符串
	U 	大写的U表示采用懒惰模式
	s   小写的s表示万能点 表示除了换行符之外的任意一个字符，采用万能点模式就会匹配任意的字符包括换行符
	m，小写的m，表示多行模式

	preg_match($pattern, $str, $match);		匹配一次，一旦匹配到结果就停止
		$pattern  //正则表达式  /[a-z]+/
		$str      //要查找的字符串
		$match    // 返回
	preg_match_all()						匹配到结果之后继续往后匹配，一直匹配到字符串结尾，将匹配的结果存储到数组
	preg_split() 							拆分，先根据规则进行全局匹配，再进行拆分
js
	在javascript中，表示中文的范围 		[\u4e00-\u9fa5]
	在javascript中，不支持逆向预查，支持正向预查

	创建正则对象
	var reg = /正则表达式/模式;
	var reg = new RegExp('正则表达式','模式')

	模式
		g	全局匹配(查找所有匹配而非在找到第一个匹配后停止)
		i	区分大小写的匹配
		m	多行匹配
		ECMAScript标准化之前,不支持m属性.如果pattern是正则表达式,而不是字符串,则必须省略该参数
	
	属性
		global		RegExp对象是否具有标志g
		ignoreCase	RegExp对象是否具有标志i
		multiline	RegExp对象是否具有标志m
		lastIndex	一个整数,标示开始下一次匹配的字符位置
		source		正则表达式的源文本
	方法
		RegExp对象方法
				complie		编译正则表达式
			reg.test(str)	检索字符串中指定的值.返回true或false
				exec(str)	检索字符串中指定的值.返回找到的值,并确定其位置
					循环输出exec
						while(res = reg.exec(str)){write(res)}
					在使用exec方法时,一定要添加一个g模式,不然会陷入死循环
		
		支持正则表达式的String对象的方法
			str.search(reg)			返回指定模式的字符串所在位置
				match(reg)			返回指定模式的字符串,返回数组
				replace(reg,'*') 	返回指定模式替换后的字符串
					第二个参数可以直接引用缓存区中的内容,引用凡是$n(n代表数字,1到n)区域名
				split(reg)			返回指定模式分割后的字符串,返回数组
	
	