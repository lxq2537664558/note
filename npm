npm 附属于 node

npm --version 				// 版本
npm --help 					// 帮助
npm install --global npm 	// 自己升级自己


// 安装
npm install [back] [--option]
	// 没有参数  		会加载 package.json 里面所有的包依赖
	// back 		要安装的包   多个 包 以空格分隔
	// --save -S  	会把 包 信息保存到 package.json 文件里面  
	// uninstall  	删除

npm install jquery @1.1.0  // 安装指定版本



package.json (包 描述文件)
	dependencies   	// 第三方包的依赖信息
	scripts			// 可执行脚本


	main			// 项目入口文件
	name 			// 项目名
	version			// 版本
	description		// 描述
	author 			// 作者




// 初始化  ()
npm init -y 
	// -y 跳过向导



// 转义工具
npm install -g babel-cli
npm install --save-dev babel-breset-es2015 babel-cli


.babelrc
{
	"presets": [
		"es2015"
	],
	"plugins": []
}




// Express   (node http 框架)
	var express = require('express')

	// 创建 webServer
	var app = express()

	// 公开文件目录
	app.use('/public/', express.static('./public/'))   	// public/text
	app.use(express.static('./public/')) 				// text


	// get
	app.get('/', function(req, res){})

	// 监听端口
	app.listen(3000,function(){})

	// 请求 request
		req.query() 		// 请求数据  只用于 get


	// 响应 response
		res.redirect('/')  //  重定向

		// 返回200 json 数据
		res.status(200).json({

		})

	// 路由  
		route.js
			module.exports = function(app){
				app.get()
			}

		app.js
			var route = require('./router')
			route(app)	

		express 方法
		// 路由容器
		route.js
			var express = require('express')
			var router = express.Router()
			
			router.get(){}

			module.exports = router

		app.js
			var router = require('./router')
			app.use(router)


	// 处理错误

		next(err)    // next 带有参数的时候   会找到下一个带有4个参数的中间件

		app.ues(function(err, req, res, next){

		})



// 中间件
	body-parser  // 获取 post 数据
		npm install bodyParser --save

		var bodyParser = require('body-parser')

		app.use(bodyParser.urlencoded({ extended: false }))
		app.use(bodyParser.json())

		res.body

	express-session // 获取 session
		npm install exp

		var session = require('express-session')

		app.use(session({
			secret: 'keyboard cat',
			resave: false,
			saveUninitialized: true  // 为真是 写了 session 才添加 session
		}))

		// 设置
		req.session.foo = assa

		// 获取
		req.session.foo = sasa




// art-template 模板引擎 
	var express = require('express');

	// 模板标签
		{{value}}
		{{data.key}}
		{{data['key']}}
		{{a ? b : c}}
		{{a || b}}
		{{a + b}}

		{{if v1}} ... {{else if v2}} ... {{/if}}

		{{each target}}
		    {{$index}} {{$value}}
		{{/each}}

		// 设置变量
		{{set temp = data.sub.content}}

		// 继承
		{{extend './layout.art'}}
		{{block 'head'}} ... {{/block}}

		// 子模板
		{{include './header.art'}}
		{{include './header.art' data}}

		// 过滤器
			// 注册
			template.defaults.imports.dateFormat = function(date, format){/*[code..]*/};
			template.defaults.imports.timestamp = function(value){return value * 1000};

			// 使用
			{{date | timestamp | dateFormat 'yyyy-MM-dd hh:mm:ss'}}

	// 渲染
		// 基于模板名渲染模板
		template(filename, data);

		// 将模板源代码编译成函数
		template.compile(source, options);

		// 将模板源代码编译成函数并立刻执行
		template.render(source, data, options);


	// 结合 express 使用
		install express-art-template --save
		
		// 绑定渲染引擎
		app.engine('art', require('express-art-template'));
		
		// 跟换 view 目录 (默认 views)
		app.set('views', 'path')

		app.set('view options', {
		    debug: process.env.NODE_ENV !== 'production'
		});



// 代码自动生效
	npm install --global nodemon

	nodemon app.js



mongoose 			// mongo 第三方包
	var mongoose = require('mongoose')

	// 连接数据库   test 可以不用存在 (当插入第一条数据后  就会创建)
	mongoose.connet('mongodb://localhost/test', { useMongoClient: true })

	// 约束 
	var Schema = mongoose.Schma
	var userSchema = new Schema({
		title: String,
		author: {
			type: String,
			required: true
		},
		comments: [{ body: String, date: Date }],
		date: { type: Date, default: Date.now },
		hidden: Boolean,
		meta: {
			votes: Number,
			favs: Number
		}
	})

	// 文档结构发布为模型        这个 User 会变成 uesrs
	var User = mongoose.mode('User', userSchema)


	// 新增
	var admin = new User({
		username: 'aaa'
	})

	admin.save(function(err, res){

	})


	// 查询
	User.find(function(err, res){}) 		// 所有
	// 查询条件
	User.find({ username: 'aa'},function(err, ret){

	})
	// 只查找一个 和 find 一样
	User.findOne()

	// 删除
	User.remove({ user: 'aa' }, funciton(){

	})

	// 更新数据
	User.findByIdAndUpdate(id, {
		username: 321
	}, function(err, ret){

	})

	mongoose.Promise = global.Promise


	var kitty = mongoose.model('Cat', { name: String })

	// 
	kitty.save(function(err){
		if(err){
			console.log(err)
		}else{
			console.log('meow')
		}
	})


mysql 			// mysql
	var mysql = require('mysql') 
	varconnection = mysql.createConnection({
		host: 'localhost',
		user: 'me',
		password: 'secret',
		database: 'my_db'
	})

	connection.connect()

	connection.query('select 1 + 1 AS solution', function(error, resulte, fields){

	})

	connection.end();




lockr.js  本地存储localstorage
	// 前缀  设置一个字符串用于标记相关的值  
	Lockr.prefix - String
		Lockr.prefix = 'lockr';
		Lockr.set('username', 'Coyote'); 
		localStorage.getItem('username');
		> null
		localStorage.getItem('lockr_username');
		> 'Coyote'

	// 设置  给本地储存写入值
	Lockr.set - : [ key, value ] {String, Number, Array or Object}
		Lockr.set('username', 'Coyote'); // String
		Lockr.set('user_id', 12345); // number
		Lockr.set('users', [{name: 'John Doe', age: 18}, {name: 'Jane Doe', age: 19}]);

		Lockr.get('username');
		> "Coyote"

		Lockr.get('user_id');
		> 12345

		Lockr.get('users');
		>  [{name: 'John Doe', age: 18}, {name: 'Jane Doe', age: 19}]

	// 获取  读取本地储存的值，如果获取到的数值为null/undefined  则返回设置的默认值
 	Lockr.get - : [ key  /  hash_key ， 默认值 ]
		Lockr.get('score', 0):
		> 0
		//不存在返回设置的默认值0
		Lockr.set('score', 3):
		Lockr.get('score', 0):
		> 3

		Lockr.set('username', 'Coyote');
		Lockr.get('username');
		> "Coyote"
		Lockr.rm('username');
		Lockr.get('username');
		> undefined

	// 获取所有数据
	Lockr.getAll - arguments: null
		// 二维数组
		Lockr.getAll();
		> ["Coyote", 12345, [{name: 'John Doe', age: 18}, {name: 'Jane Doe', age: 19}]]

		// json
		Lockr.getAll(true);
		> [{"username": "Coyote"}, {"user_id": 12345}, {"users": [{name: 'John Doe', age: 18}, {name: 'Jane Doe', age: 19}]}]

	// 删除  从本地储存中移除相关数据
	Lockr.rm - arguments: [ key ] {String}
		Lockr.set('username', 'Coyote');
		Lockr.get('username');
		> "Coyote"
		
		Lockr.rm('username');
		Lockr.get('username');
		> undefined

	// 清空本地储存所有数据
	Lockr.flush() - arguments: null
		localStorage.length;
		> 3
		
		Lockr.flush();
		localStorage.length;
		> 0

	
	// 给hash key添加指定值（持续添加类似push 但具备set 自动过滤重复）
	Lockr.sadd - arguments [ key, value ]{String, Number, Array or Object}
		Lockr.sadd("wat", 1); // [1]
		Lockr.sadd("wat", 2); // [1, 2]
		Lockr.sadd("wat", 1); // [1, 2]

	// 判断某hash key 是否包含某个值  返回Boolean true false
	Lockr.sismember - arguments [ key, value ]
		Lockr.sadd("wat", 1);
		Lockr.sismember("wat", 1); // true
		Lockr.sismember("wat", 2); // false	

	// 返回hash key下的值
	Lockr.smembers - arguments [ key ]
		Lockr.sadd("wat", 42);
		Lockr.sadd("wat", 1337);
		Lockr.smembers("wat"); // [42, 1337]	

	// 移除hash key下的指定数值
	Lockr.srem - arguments [ key, value ]
		Lockr.sadd("wat", 1);
		Lockr.sadd("wat", 2);
		Lockr.srem("wat", 1);
		Lockr.smembers("wat"); // [2]	


Cookies.js   操作cookie
	方法
		Cookies.set('key', 'value', { expires: 600 })
		Cookies.get（key）
			Alias: Cookies(key)
		Cookies.expire（key [，options]）

	属性
		Cookies.enabled 

		Cookies.defaults
			Cookies.defaults = {
				path: '/',
				secure: true
			};

	options
		path		"/"
		domain		undefined
		expires  	undefined
		secure		false